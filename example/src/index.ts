import express, {Request} from "express"
import cors from "cors"
import {
  ExpressType,
  modelRestEndpoints,
  Route,
  SimplyServer
} from "simply-served"
import todoDb from "./todoDb"
import {z} from "zod"
import {TodoDb} from "./types"

const app = express()

app.use(express.json()) // Convert to Json
app.use(cors()) // Disable cors

type DbAndAuth = {db: TodoDb; userId?: string}

class TodoServer extends SimplyServer<DbAndAuth> {
  constructor() {
    super({
      db: todoDb,
      middleware: (req: Request, skipAuth?: boolean) => {
        const idFromHeaders = req.headers["x-userid"] as string | undefined
        if (idFromHeaders) {
          return {db: todoDb, userId: idFromHeaders}
        }
        if (skipAuth) return {db: todoDb}
        return null
      }
    })
  }
  controllers: Record<string, Route<DbAndAuth>[]> = {
    // Autogenerated rest endpoints for the Todo model
    todo: modelRestEndpoints({
      endpoint: (db) => db.todo,
      validator: z.object({
        _id: z.string().uuid(),
        todoItem: z.string(),
        owner: z.string().uuid(),
        done: z.boolean().default(true)
      }),
      permissions: {
        read: () => ({Always: true}),
        create: () => ({Always: true}),
        modify: () => ({Always: true}),
        delete: ({userId}) => ({owner: {Equal: userId ?? ""}})
      }
    }),
    // Autogenerated rest endpoints for the User model
    user: modelRestEndpoints({
      endpoint: (db) => db.user,
      validator: z.object({
        _id: z.string().uuid(),
        name: z.string()
      }),
      permissions: {
        create: () => ({Always: true}),
        read: () => ({Always: true}),
        modify: ({userId}) => ({_id: {Equal: userId ?? ""}}),
        // Never allow for users to be deleted
        delete: () => ({Never: true})
      },
      skipAuth: {
        // Allow unauthenticated users to view users
        query: true
      }
    })
  }

  afterGenerateEndpoints(app: ExpressType) {
    app.use("/", async (_req, res): Promise<any> => {
      return res.status(200).json("Welcome to my server!")
    })
  }
}

const server = new TodoServer()

server.generateEndpoints(app)

console.info("Listening on port 8080")

app.listen(8080)
